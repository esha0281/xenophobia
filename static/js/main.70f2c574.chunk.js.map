{"version":3,"sources":["data/tests.js","components/TestSelection.js","containers/Home.js","containers/About.js","actions/index.js","components/TestError.js","constants/TargetCategoryDisplayType.js","constants/ImplicitBiasTestBlocks.js","constants/InputKeys.js","data/targetAndCategoryValues.js","formatters.js","components/ActiveTest.js","components/Instructions.js","components/BlockStart.js","components/TargetAndOrCategory.js","components/Block.js","constants/Bias.js","components/Results.js","components/TestNotFound.js","components/TestStart.js","containers/ImplicitBiasTest.js","reducers/index.js","serviceWorker.js","index.js","App.js"],"names":["tests","id","name","description","targetType","categoryType","compatible","TestSelection","class","className","map","key","to","Home","About","START_TEST","START_BLOCK","SET_COMPATIBLE_MILLISECONDS","SET_INCOMPATIBLE_MILLISECONDS","FINISH_BLOCK","FINISH_TEST","RESET_TEST","TestError","TARGET_CATEGORY_DISPLAY_TYPE","INCOMPATIBLE_TARGETS_ONLY","INCOMPATIBLE_ALL","CATEGORIES_ONLY","COMPATIBLE_TARGETS_ONLY","COMPATIBLE_ALL","IMPLICIT_BIAS_TEST_BLOCKS","numTrials","displayType","DISPLAY_TYPE","critical","getEventKeyForInputKey","inputKey","INPUT_KEYS","LEFT","RIGHT","START_KEY","targetAndCategoryValues","south_african","african","good_person","bad_person","toTitleCase","text","split","word","charAt","toUpperCase","substring","reduce","acc","cur","TARGET_OR_CATEGORY","TARGET","CATEGORY","LEFT_OR_RIGHT","TARGET_CATEGORY_ORDER","LEFT_RIGHT_OPTIONS","ActiveTest","valuesForOptions","targetOrCategory","leftOrRight","props","leftTargetValues","rightTargetValues","leftCategoryValues","rightCategoryValues","startNewRound","currentRound","state","currentBlock","dispatchFinishBlock","soleTargetOrCategory","Math","round","random","valuesWithoutLastTwoRoundValues","filter","v","valueToDisplay","lastValueToDisplay","indexOf","floor","length","setState","incorrectKeyPressed","handleKeyPress","event","handleLeftKeyPress","handleRightKeyPress","displayIncorrectKeySign","this","timeStarted","Date","now","document","addEventListener","removeEventListener","totalTime","dispatchSetCompatibleMilliseconds","dispatchSetIncompatibleMilliseconds","currentTest","currentBlockIndex","dispatchFinishTest","React","Component","getSoleTargetOrCategory","leftTarget","leftCategory","VisibleActiveTest","connect","rightTarget","rightCategory","dispatch","type","millis","compatibleMilliseconds","incompatibleMilliseconds","getInstructionForSide","target","category","isLeft","onlyTarget","onlyCategory","side","categoryOrTargetClass","value","styledValue","getExtraInstruction","hasTargetAndCategory","Instructions","leftInstruction","rightInstruction","extraInstruction","BlockStart","startBlock","displayIndex","numBlocks","Object","keys","TargetAndOrCategory","VisibleBlock","dispatchStartBlock","test","result","targetList","reverseTargetList","slice","reverse","categoryList","values","assign","getDisplayValuesForType","blockStarted","BIAS","NONE","COMPATIBLE","INCOMPATIBLE","Results","dispatchResetTest","resultStatement","bias","targetsInCompatibleOrder","categories","firstCategory","secondCategory","targetsInIncompatibleOrder","getResultStatement","incompatibleCompatibleDiff","abs","getBias","VisibleResults","TestNotFound","TestStart","onStartTestButtonPress","onClick","e","preventDefault","VisibleImplicitBiasTest","dispatchStartTest","startTest","testId","useParams","find","finished","initialState","rootReducer","combineReducers","action","Boolean","window","location","hostname","match","store","createStore","render","path","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.70f2c574.chunk.js","sourcesContent":["// Possible test (each with compatible targets to category data)\n\nconst tests = [\n  {\n    id: 'power-happiness',\n    name: 'African test',\n    description: '',\n    targetType: 'nationality',\n    categoryType: 'type of person',\n    compatible: {\n      'south_african': 'good_person',\n      'african': 'bad_person'\n    },\n    \n  }\n]\n\nexport default tests;\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport tests from '../data/tests'\n\nexport default function TestSelection() {\n  return (\n    <div>\n        <h4 class=\"header center red-text text-darken-4\">Pick an implicit association test to take:</h4>\n      <section className=\"test-list\">\n      {tests.map(({name, description, id}) => (\n        <div className=\"test-option\" key={id}>\n          <h4 class=\"header center grey-text\"><Link to={`/test/${id}`}>{name}</Link></h4>\n          <p class=\"center\">{description}</p>\n        </div>\n      ))}\n      </section>\n    </div>\n  )\n}\n","import React from 'react'\nimport TestSelection from '../components/TestSelection'\n\nexport default function Home() {\n  return (\n    <div>\n    <h1 class=\"header center red-text text-darken-4\">Implicit Association Tool</h1>\n    <div class=\"row center\">\n        <h5 class=\"header col s12 light\">\n            <p>Uncover and discuss the underlying biases we share.</p>\n        </h5> \n      </div>\n\n      <div class=\"divider\"></div>\n      <TestSelection />\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function About() {\n  return (\n    <div>\n      <h2>About</h2>\n      <p>This is a tool to roughly measure implicit association bias.</p>\n    </div>\n  )\n}\n","export const START_TEST = 'START_TEST'\nexport const START_BLOCK = 'START_BLOCK'\nexport const SET_COMPATIBLE_MILLISECONDS = 'SET_COMPATIBLE_MILLISECONDS'\nexport const SET_INCOMPATIBLE_MILLISECONDS = 'SET_INCOMPATIBLE_MILLISECONDS'\nexport const FINISH_BLOCK = 'FINISH_BLOCK'\nexport const FINISH_TEST = 'FINISH_TEST'\nexport const RESET_TEST = 'RESET_TEST'\n\nexport const startTest = test => ({\n  type: START_TEST,\n  test\n})\n\nexport const startBlock = () => ({\n  type: START_BLOCK\n})\n\nexport const setCompatibleMilliseconds = compatibleMilliseconds => ({\n  type: SET_COMPATIBLE_MILLISECONDS,\n  compatibleMilliseconds\n})\n\nexport const setIncompatibleMilliseconds = incompatibleMilliseconds => ({\n  type: SET_INCOMPATIBLE_MILLISECONDS,\n  incompatibleMilliseconds\n})\n\nexport const finishBlock = () => ({\n  type: FINISH_BLOCK\n})\n\nexport const finishTest = () => ({\n  type: FINISH_TEST\n})\n\nexport const resetTest = () => ({\n  type: RESET_TEST\n})\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nexport default function TestError() {\n  return (\n    <div className=\"error\">\n      <h2>Test error</h2>\n      <div>\n        Apologies, we encountered an unexpected error. Please try returning to the <Link to=\"/home\">home page</Link>.\n      </div>\n    </div>\n  )\n}\n","const TARGET_CATEGORY_DISPLAY_TYPE = {\n  INCOMPATIBLE_TARGETS_ONLY: 'INCOMPATIBLE_TARGETS_ONLY',\n  INCOMPATIBLE_ALL: 'INCOMPATIBLE_ALL',\n  CATEGORIES_ONLY: 'CATEGORIES_ONLY',\n  COMPATIBLE_TARGETS_ONLY: 'COMPATIBLE_TARGETS_ONLY',\n  COMPATIBLE_ALL: 'COMPATIBLE_ALL',\n}\n\nexport default TARGET_CATEGORY_DISPLAY_TYPE\n\nexport function getDisplayValuesForType(displayType, compatible) {\n  const result = {\n    leftTarget: null, rightTarget: null, leftCategory: null, rightCategory: null\n  }\n  const targetList = Object.keys(compatible)\n  const reverseTargetList = targetList.slice().reverse()\n  const categoryList = Object.values(compatible)\n  switch(displayType) {\n    case TARGET_CATEGORY_DISPLAY_TYPE.CATEGORIES_ONLY:\n      return Object.assign(result, {\n        leftCategory: categoryList[0], rightCategory: categoryList[1]\n      })\n    case TARGET_CATEGORY_DISPLAY_TYPE.COMPATIBLE_ALL:\n      return Object.assign(result, {\n        leftTarget: targetList[0], rightTarget: targetList[1], leftCategory: categoryList[0], rightCategory: categoryList[1]\n      })\n    case TARGET_CATEGORY_DISPLAY_TYPE.COMPATIBLE_TARGETS_ONLY:\n      return Object.assign(result, {leftTarget: targetList[0], rightTarget: targetList[1]})\n    case TARGET_CATEGORY_DISPLAY_TYPE.INCOMPATIBLE_ALL:\n      return Object.assign(result, {\n        leftTarget: reverseTargetList[0], rightTarget: reverseTargetList[1], leftCategory: categoryList[0], rightCategory: categoryList[1]\n      }) \n    case TARGET_CATEGORY_DISPLAY_TYPE.INCOMPATIBLE_TARGETS_ONLY:\n      return Object.assign(result, {\n        leftTarget: reverseTargetList[0], rightTarget: reverseTargetList[1]\n      }) \n    default:\n      return result\n  }\n}","import DISPLAY_TYPE from '../constants/TargetCategoryDisplayType';\n\nconst IMPLICIT_BIAS_TEST_BLOCKS = [\n  {\n    numTrials: 2,\n    displayType: DISPLAY_TYPE.INCOMPATIBLE_TARGETS_ONLY\n  },\n  {\n    numTrials: 2,\n    displayType: DISPLAY_TYPE.CATEGORIES_ONLY\n  },\n  {\n    numTrials: 2,\n    displayType: DISPLAY_TYPE.INCOMPATIBLE_ALL\n  },\n  {\n    numTrials: 4,\n    displayType: DISPLAY_TYPE.INCOMPATIBLE_ALL,\n    critical: true\n  },\n  {\n    numTrials: 2,\n    displayType: DISPLAY_TYPE.COMPATIBLE_TARGETS_ONLY\n  },\n  {\n    numTrials: 2,\n    displayType: DISPLAY_TYPE.COMPATIBLE_ALL\n  },\n  {\n    numTrials: 4,\n    displayType: DISPLAY_TYPE.COMPATIBLE_ALL,\n    critical: true\n  }\n]\n\nexport default IMPLICIT_BIAS_TEST_BLOCKS;\n","const INPUT_KEYS = {\n  LEFT: 'E',\n  RIGHT: 'I',\n  START_KEY: 'space bar'\n}\n\nexport const getEventKeyForInputKey = (inputKey) => {\n  switch(inputKey) {\n    case 'E':\n      return 'e'\n    case 'I':\n      return 'i'\n    case 'space bar':\n      return ' '\n    default:\n      return null; // unsupported\n  }\n}\n\nexport default INPUT_KEYS\n","const targetAndCategoryValues = {\n  south_african: ['white south africans', 'black south africans', 'colored  south africans', 'malay', 'indiginous'],\n  african: ['congolese', 'kenyans', 'nigerians', 'somalians', 'zimbabweans'],\n  good_person: ['job-promoter', 'doctor', 'lawyer', 'good-samaritan', 'philanthropist', 'police officer', 'humanitarian'],\n  bad_person: ['job-stealer', 'murderer', 'rapist', 'troubled', 'burglarer', 'drug-trafficker', 'fraudster']\n}\n\nexport default targetAndCategoryValues","export const toTitleCase = (text) => !!text ?\n  text\n    .split(/[ _]/)\n    .map(word => word.charAt(0).toUpperCase() + word.substring(1))\n    .reduce((acc, cur) => !acc ? cur : `${acc} ${cur}`, '') :\n  text\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport TestError from './TestError'\nimport { finishBlock, finishTest, setCompatibleMilliseconds, setIncompatibleMilliseconds } from '../actions'\nimport IMPLICIT_BIAS_TEST_BLOCKS from '../constants/ImplicitBiasTestBlocks'\nimport INPUT_KEYS, { getEventKeyForInputKey } from '../constants/InputKeys'\nimport targetAndCategoryValues from '../data/targetAndCategoryValues'\nimport { toTitleCase } from '../formatters'\nimport TARGET_CATEGORY_DISPLAY_TYPE from '../constants/TargetCategoryDisplayType'\n\nconst TARGET_OR_CATEGORY = { // need to be lowercase - will be used as classes\n  TARGET: 'target',\n  CATEGORY: 'category'\n}\n\nconst LEFT_OR_RIGHT = {\n  LEFT: 'LEFT',\n  RIGHT: 'RIGHT'\n}\n\nconst TARGET_CATEGORY_ORDER = [TARGET_OR_CATEGORY.TARGET, TARGET_OR_CATEGORY.CATEGORY]\nconst LEFT_RIGHT_OPTIONS = [LEFT_OR_RIGHT.LEFT, LEFT_OR_RIGHT.RIGHT]\n\nclass ActiveTest extends React.Component {\n  constructor() {\n    super()\n    this.state = { currentRound: -1 }\n  }\n  componentDidMount() {\n    if (!!this.props.currentBlock && this.props.currentBlock.critical) {\n      this.setState({ timeStarted: Date.now() })\n    }\n    document.addEventListener('keyup', this.handleKeyPress)\n    this.startNewRound()\n  }\n  componentWillUnmount() {\n    document.removeEventListener('keyup', this.handleKeyPress)\n    if (this.props.currentBlock.critical) {\n      const totalTime = Date.now() - this.state.timeStarted\n      this.props.currentBlock.displayType === TARGET_CATEGORY_DISPLAY_TYPE.COMPATIBLE_ALL ?\n        this.props.dispatchSetCompatibleMilliseconds(totalTime) :\n        this.props.dispatchSetIncompatibleMilliseconds(totalTime)\n    }\n    \n    if (this.props.currentTest.currentBlockIndex  === IMPLICIT_BIAS_TEST_BLOCKS.length - 1) {\n      this.props.dispatchFinishTest()\n    }\n  }\n  valuesForOptions = (targetOrCategory, leftOrRight) => {\n    if (targetOrCategory === TARGET_OR_CATEGORY.TARGET) {\n      return leftOrRight === LEFT_OR_RIGHT.LEFT ?\n        this.props.leftTargetValues :\n        this.props.rightTargetValues\n    }\n    return leftOrRight === LEFT_OR_RIGHT.LEFT ?\n      this.props.leftCategoryValues :\n      this.props.rightCategoryValues\n  }\n  startNewRound = () => {\n    const currentRound = this.state.currentRound + 1\n    if (currentRound >= this.props.currentBlock.numTrials) {\n      return this.props.dispatchFinishBlock()\n    }\n    const targetOrCategory = !!this.props.soleTargetOrCategory ?\n      this.props.soleTargetOrCategory :\n      TARGET_CATEGORY_ORDER[currentRound % 2]\n    const leftOrRight = LEFT_RIGHT_OPTIONS[Math.round(Math.random())]\n    const values = this.valuesForOptions(targetOrCategory, leftOrRight)\n    const valuesWithoutLastTwoRoundValues = values.filter(v =>\n      [this.state.valueToDisplay, this.state.lastValueToDisplay].indexOf(v) === -1)\n    const valueToDisplayIndex = Math.floor(Math.random() * Math.floor(valuesWithoutLastTwoRoundValues.length - 1))\n    const valueToDisplay = valuesWithoutLastTwoRoundValues[valueToDisplayIndex]\n    return this.setState({\n      currentRound,\n      targetOrCategory,\n      leftOrRight,\n      valueToDisplay,\n      lastValueToDisplay: this.state.valueToDisplay,\n      incorrectKeyPressed: false\n    })\n  }\n  handleKeyPress = (event) => {\n    switch(event.key) {\n      case getEventKeyForInputKey(INPUT_KEYS.LEFT):\n        return this.handleLeftKeyPress()\n      case getEventKeyForInputKey(INPUT_KEYS.RIGHT):\n        return this.handleRightKeyPress()\n      default:\n        return\n    }\n  }\n  handleLeftKeyPress = () => {\n    if (this.state.leftOrRight === LEFT_OR_RIGHT.LEFT) {\n      return this.startNewRound()\n    } else if (this.state.leftOrRight === LEFT_OR_RIGHT.RIGHT) {\n      this.displayIncorrectKeySign()\n    }\n  }\n  handleRightKeyPress = () => {\n    if (this.state.leftOrRight === LEFT_OR_RIGHT.RIGHT) {\n      return this.startNewRound()\n    } else if (this.state.leftOrRight === LEFT_OR_RIGHT.LEFT) {\n      this.displayIncorrectKeySign()\n    }\n  }\n  displayIncorrectKeySign = () => {\n    this.setState({incorrectKeyPressed: true})\n  }\n  render() {\n    const { currentBlock } = this.props\n    const { valueToDisplay, targetOrCategory, incorrectKeyPressed } = this.state\n    if (!currentBlock) return <TestError />\n    return (\n      <div>\n        <div className={`displayed-test-value ${targetOrCategory}`}>{toTitleCase(valueToDisplay)}</div>\n        <div className=\"incorrect-key-x\">{incorrectKeyPressed && 'X'}</div>\n        <p>If you make a mistake, a red <span className=\"bold-red\">X</span> will appear. Press the other key to continue.</p>\n      </div>\n    )\n  } \n}\n\nconst getSoleTargetOrCategory = (leftTarget, leftCategory) => {\n  if (!!leftTarget && !leftCategory) return TARGET_OR_CATEGORY.TARGET\n  if (!leftTarget && !!leftCategory) return TARGET_OR_CATEGORY.CATEGORY\n  return null\n}\n\nconst mapStateToProps = ({ currentTest }, { leftTarget, leftCategory, rightTarget, rightCategory }) => {\n  return {\n    currentTest,\n    currentBlock: IMPLICIT_BIAS_TEST_BLOCKS[currentTest.currentBlockIndex],\n    leftTargetValues: !!leftTarget ? targetAndCategoryValues[leftTarget] : null,\n    rightTargetValues: !!rightTarget ? targetAndCategoryValues[rightTarget] : null,\n    leftCategoryValues: !!leftCategory ? targetAndCategoryValues[leftCategory] : null,\n    rightCategoryValues: !!rightCategory ? targetAndCategoryValues[rightCategory] : null,\n    soleTargetOrCategory: getSoleTargetOrCategory(leftTarget, leftCategory)\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  dispatchFinishBlock: () => dispatch(finishBlock()),\n  dispatchFinishTest: () => dispatch(finishTest()),\n  dispatchSetCompatibleMilliseconds: millis => dispatch(setCompatibleMilliseconds(millis)),\n  dispatchSetIncompatibleMilliseconds: millis => dispatch(setIncompatibleMilliseconds(millis))\n})\n\nconst VisibleActiveTest = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ActiveTest)\n\nexport default VisibleActiveTest","import React from 'react'\n\nimport INPUT_KEYS from '../constants/InputKeys'\nimport { toTitleCase } from '../formatters'\n\nconst getInstructionForSide = (currentBlockIndex, target, category, isLeft) => {\n  const onlyTarget = !!target && !category\n  const onlyCategory = !target && !!category\n\n  const inputKey = isLeft ? INPUT_KEYS.LEFT : INPUT_KEYS.RIGHT\n  const side = isLeft ? 'left' : 'right'\n\n  if (onlyTarget || onlyCategory) {\n    const categoryOrTargetClass = onlyTarget ? 'target' : 'category'\n    const value = onlyTarget ? target : category\n    const styledValue = <span className={categoryOrTargetClass}>{value}</span>\n    return currentBlockIndex < 2 ?\n        <p>Put a {side} finger on the <a class=\"btn disabled\"><strong>{inputKey}</strong></a> key for items that belong to the category {styledValue}.</p> :\n        <p>Use the <a class=\"btn disabled\"><strong>{inputKey}</strong> </a>key for {styledValue}</p>\n  }\n  return <p>Use the<a class=\"btn disabled\"> <strong>{inputKey}</strong> </a>key for <span className=\"target\">{target}</span> and for <span className=\"category\">{category}</span>.</p>\n}\n\nconst getExtraInstruction = (currentBlockIndex, hasTargetAndCategory) => {\n  if (currentBlockIndex === 0) return (<p>Items will appear one at a time.</p>)\n  if (hasTargetAndCategory) return (<p>'Each item belongs to only one category.</p>)\n  return null\n}\n\nexport default function Instructions({ currentBlockIndex, leftTarget, leftCategory, rightTarget, rightCategory }) {\n  const leftInstruction = getInstructionForSide(currentBlockIndex, toTitleCase(leftTarget), toTitleCase(leftCategory), true)\n  const rightInstruction = getInstructionForSide(currentBlockIndex, toTitleCase(rightTarget), toTitleCase(rightCategory), false)\n  const extraInstruction = getExtraInstruction(currentBlockIndex, leftTarget && leftCategory)\n\n  return (\n    <div>\n      {leftInstruction}\n      {rightInstruction}\n      { !!extraInstruction && extraInstruction}\n      <p>If you make a mistake, a red <span className=\"bold-red\">X</span> will appear. Press the other key to continue.</p>\n      <p>Go as fast as you can while being accurate.</p>\n                    <div class=\"divider\"></div>\n                    <h4 class=\"header center red-text text-darken-4\">Ready?</h4>\n                        <div class =\"row center\">\n                            <h5> <p>Press the <a class=\"btn disabled\"> <strong>{INPUT_KEYS.START_KEY}</strong></a> when you are ready to start.</p></h5>\n\n                        </div>\n    </div>\n  )\n}\n","import React, { Component } from 'react'\nimport Instructions from './Instructions'\nimport IMPLICIT_BIAS_TEST_BLOCKS from '../constants/ImplicitBiasTestBlocks'\nimport INPUT_KEYS, { getEventKeyForInputKey } from '../constants/InputKeys'\n\nexport default class BlockStart extends Component{\n  componentDidMount() {\n    document.addEventListener('keyup', this.handleKeyPress)\n  }\n  componentWillUnmount() {\n    document.removeEventListener('keyup', this.handleKeyPress)\n  }\n  handleKeyPress = (event) => {\n    if (event.key === getEventKeyForInputKey(INPUT_KEYS.START_KEY)) this.props.startBlock()\n  }\n  render() {\n    const { currentBlockIndex, leftTarget, rightTarget, leftCategory, rightCategory } = this.props\n    const displayIndex = currentBlockIndex + 1\n    const numBlocks = Object.keys(IMPLICIT_BIAS_TEST_BLOCKS).length\n    return (\n      <div className=\"block-pre-test\">\n        <h3 class=\"header center red-text text-darken-4\">Part {displayIndex} of {numBlocks}</h3>\n        <div class=\"center\">\n        <Instructions\n          currentBlockIndex={currentBlockIndex}\n          leftTarget={leftTarget}\n          rightTarget={rightTarget}\n          leftCategory={leftCategory}\n          rightCategory={rightCategory}\n        />\n      </div>\n      </div>\n    )\n  }\n}\n","import React from 'react'\n\nimport {  toTitleCase} from '../formatters'\n\nexport default function TargetAndOrCategory({ target, category }) {\n  return (\n    <div className=\"target-and-or-category\">\n      { !!target && (<div className=\"target\">{toTitleCase(target)}</div>) }\n      { !!target && !!category && <div className=\"or-separator\">or</div>}\n      { !!category && (<div className=\"category\">{toTitleCase(category)}</div>) }\n    </div>\n  )\n}\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport ActiveTest from './ActiveTest'\nimport BlockStart from './BlockStart'\nimport TargetAndOrCategory from './TargetAndOrCategory'\nimport TestError from './TestError'\nimport { startBlock } from '../actions'\nimport IMPLICIT_BIAS_TEST_BLOCKS from '../constants/ImplicitBiasTestBlocks'\nimport INPUT_KEYS from '../constants/InputKeys'\nimport { getDisplayValuesForType } from '../constants/TargetCategoryDisplayType'\n\nconst Block = ({ test, currentTest, dispatchStartBlock }) => {\n  const currentBlock = IMPLICIT_BIAS_TEST_BLOCKS[currentTest.currentBlockIndex]\n  if (!currentBlock) return <TestError />\n  const { displayType } = currentBlock\n  const { leftTarget, rightTarget, leftCategory, rightCategory } = getDisplayValuesForType(displayType, test.compatible)\n  return (\n    <div className=\"test-block\">\n      <section className=\"selection-groups\">\n        <div className=\"left-selection-group\">\n          <h6>Press \"{INPUT_KEYS.LEFT}\" for</h6>\n          <TargetAndOrCategory target={leftTarget} category={leftCategory} />\n        </div>\n        <div className=\"right-selection-group\">\n          <h6>Press \"{INPUT_KEYS.RIGHT}\" for</h6>\n          <TargetAndOrCategory target={rightTarget} category={rightCategory} />\n        </div>\n      </section>\n      { currentTest.blockStarted ?\n        <ActiveTest\n          currentTest={currentTest}\n          leftTarget={leftTarget}\n          rightTarget={rightTarget}\n          leftCategory={leftCategory}\n          rightCategory={rightCategory}\n        /> :\n        <BlockStart\n          currentBlockIndex={currentTest.currentBlockIndex}\n          leftTarget={leftTarget}\n          rightTarget={rightTarget}\n          leftCategory={leftCategory}\n          rightCategory={rightCategory}\n          startBlock={() => dispatchStartBlock()}\n        />\n      }\n    </div>\n  )\n}\n\nconst mapStateToProps = ({currentTest}) => ({\n  currentTest\n})\n\nconst mapDispatchToProps = dispatch => ({\n  dispatchStartBlock: () => dispatch(startBlock())\n})\n\nconst VisibleBlock = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Block)\n\nexport default VisibleBlock\n","const BIAS = {\n  NONE: 'NO_BIAS',\n  COMPATIBLE: 'COMPATIBLE',\n  INCOMPATIBLE: 'INCOMPATIBLE'\n}\n\nexport default BIAS\n","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport { connect } from 'react-redux'\n\nimport { resetTest } from '../actions'\nimport BIAS from '../constants/Bias'\nimport { toTitleCase } from '../formatters'\n\nconst BIAS_THRESHOLD = 1000\n\nconst getBias = (incompatibleMilliseconds, compatibleMilliseconds) => {\n  const incompatibleCompatibleDiff = incompatibleMilliseconds - compatibleMilliseconds\n  if (Math.abs(incompatibleCompatibleDiff) <= BIAS_THRESHOLD) {\n    return BIAS.NONE\n  }\n  return incompatibleCompatibleDiff > 0 ?\n    BIAS.COMPATIBLE :\n    BIAS.INCOMPATIBLE\n}\n\nconst getResultStatement = (bias, test) => {\n  const { targetType, categoryType, compatible } = test\n  const targetsInCompatibleOrder = Object.keys(compatible)\n  const categories = Object.values(compatible)\n  const firstCategory = categories[0]\n  const secondCategory = categories[1]\n  switch(bias) {\n    case BIAS.NONE:\n      return (\n        <p className=\"result-headline\">\n          Your responses suggest no automatic association between <span className=\"target\">{targetType}\n          </span> and <span className=\"category\">{categoryType}</span>.\n          \n        </p>\n        \n      )\n    case BIAS.COMPATIBLE:\n      return (\n        <h4 className=\"result-headline\">\n          Your responses suggest an automatic association for <span className=\"target\">\n          {toTitleCase(targetsInCompatibleOrder[0])}\n          </span> with <span className=\"category\">{toTitleCase(firstCategory)}\n          </span> and <span className=\"target\">{toTitleCase(targetsInCompatibleOrder[1])}\n          </span> with <span className=\"category\">{toTitleCase(secondCategory)}\n          </span>.\n        </h4>\n      )\n    case BIAS.INCOMPATIBLE:\n      const targetsInIncompatibleOrder = targetsInCompatibleOrder.slice().reverse()\n      return (\n        <h4 className=\"result-headline\">\n          Your responses suggest an automatic association for <span className=\"target\">\n          {toTitleCase(targetsInIncompatibleOrder[0])}\n          </span> with <span className=\"category\">{toTitleCase(firstCategory)}\n          </span> and <span className=\"target\">{toTitleCase(targetsInIncompatibleOrder[1])}\n          </span> with <span className=\"category\">{toTitleCase(secondCategory)}\n          </span>.\n          \n        </h4>\n      )\n    default:\n      return 'We were unable to calculate your results due to an unexpected error.'\n  }\n}\n\nclass Results extends Component {\n  componentWillUnmount() {\n    this.props.dispatchResetTest()\n  }\n  render() {\n    const { test, currentTest } = this.props\n    const { incompatibleMilliseconds, compatibleMilliseconds } = currentTest\n    const bias = getBias(incompatibleMilliseconds, compatibleMilliseconds)\n    const resultStatement = getResultStatement(bias, test)\n    return (\n      <div>\n        <h2>Results</h2>\n        {resultStatement}\n        <p>More info about results to come...</p>\n        <Link to=\"/home\">Back to home</Link>\n      </div>\n    )\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  dispatchResetTest: () => dispatch(resetTest())\n})\n\nconst VisibleResults = connect(\n  () => ({}),\n  mapDispatchToProps \n)(Results)\n\nexport default VisibleResults","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nexport default function TestNotFound() {\n  return (\n    <div className=\"test-not-found\">\n      <h2>Test not found</h2>\n      <p>We could not find a test with that id. You can find our full lists of tests at the <Link to=\"/home\">home page</Link>.</p>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function TestStart({ test, onStartTestButtonPress }) {\n  return (\n    <div>\n      <h2>Welcome</h2>\n      <p>You have selected the {test.name}</p> test. You will be asked to sort words into groups as quickly as you can.\n      <button\n        className=\"implicit-test-start-button\"\n        type=\"button\"\n        onClick={e => e.preventDefault() && onStartTestButtonPress()}\n      >Start test</button>\n    </div>\n  )\n}\n","import React from 'react';\nimport { connect } from 'react-redux'\nimport { useParams } from 'react-router-dom'\n\nimport { startTest } from '../actions'\nimport Block from '../components/Block'\nimport Results from '../components/Results'\nimport TestNotFound from '../components/TestNotFound'\nimport TestStart from '../components/TestStart'\nimport tests from '../data/tests'\nimport '../scss/implicit-bias-test.scss'\n\nconst ImplicitBiasTest = ({ currentTest, dispatchStartTest }) => {\n  const { testId } = useParams();\n  const test = tests.find((test) => test.id === testId);\n  if (!test) return (<TestNotFound />)\n  if (!!currentTest) {\n    return !currentTest.finished ?\n      <Block test={test} currentTest={currentTest} /> :\n      <Results test={test} currentTest={currentTest} />\n  }\n  return (<TestStart test={test} onStartTestButtonPress={() => dispatchStartTest(test)} />)\n}\n\nconst mapStateToProps = ({ currentTest }) => ({\n  currentTest\n})\n\nconst mapDispatchToProps = dispatch => ({\n  dispatchStartTest: test => dispatch(startTest(test))\n})\n\nconst VisibleImplicitBiasTest = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ImplicitBiasTest)\n\nexport default VisibleImplicitBiasTest\n","import { combineReducers } from 'redux'\nimport {\n  START_TEST,\n  START_BLOCK,\n  SET_COMPATIBLE_MILLISECONDS,\n  SET_INCOMPATIBLE_MILLISECONDS,\n  FINISH_BLOCK,\n  FINISH_TEST,\n  RESET_TEST\n} from '../actions'\n\nconst initialState = {\n  blockStarted: false,\n  finished: false,\n  currentBlockIndex: 0,\n  test: null,\n  compatibleMilliseconds: null,\n  incompatibleMilliseconds: null\n}\n\nfunction currentTest(state = initialState, action) {\n  switch (action.type) {\n    case START_TEST:\n      return Object.assign({}, state, { test: action.test, currentBlockIndex: 0 })\n    case START_BLOCK:\n      return Object.assign({}, state, { blockStarted: true })\n    case FINISH_BLOCK:\n      return Object.assign({}, state, { currentBlockIndex: state.currentBlockIndex + 1, blockStarted: false })\n    case SET_COMPATIBLE_MILLISECONDS:\n      return Object.assign({}, state, { compatibleMilliseconds: action.compatibleMilliseconds })\n    case SET_INCOMPATIBLE_MILLISECONDS:\n      return Object.assign({}, state, { incompatibleMilliseconds: action.incompatibleMilliseconds }) \n    case FINISH_TEST:\n      return Object.assign({}, state, { finished: true, blockStarted: false })\n    case RESET_TEST:\n      return initialState\n    default:\n      return state\n  }\n}\n\nconst rootReducer = combineReducers({\n  currentTest\n})\n\nexport default rootReducer","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\n\nimport App from './App'\nimport rootReducer from './reducers'\nimport * as serviceWorker from './serviceWorker'\nimport './scss/global.scss'\n\nconst store = createStore(rootReducer)\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport Home from './containers/Home';\nimport About from './containers/About';\nimport ImplicitBiasTest from './containers/ImplicitBiasTest';\n\nexport default function App() {\n  return (\n    <Router>\n      <div className=\"nav-and-content\">\n        \n        <Switch>\n          <Route path={`/test/:testId`}>\n            <ImplicitBiasTest />\n          </Route>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n\n        \n\n      </div>\n\n    </Router>\n  );\n}\n"],"sourceRoot":""}